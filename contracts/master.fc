#include "imports/stdlib.fc";

(cell, slice, int, int, int) load_date() inline {
    slice ds = get_data().begin_parse();

    cell contributors = ds~load_ref().begin_parse().preload_dict();
    slice owner = ds~load_msg_addr();
    int percentage_payoff = ds~load_uint(8);
    int deadline = ds~load_uint();
    int total_pledge = ds~load_coins();

    return(contributors, owner, percentage_payoff, deadline, total_pledge);
}

() save_data(cell contributors, slice owner, int percentage_payoff, int deadline, int total_pledge) impure inline{
    set_data(begin_cell()
            .store_ref(contributors)
            .store_slice(owner)
            .store_uint(percentage_payoff)
            .store_uint(deadline)
            .store_uint(total_pledge)
            .end_cell())
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    ;; if (in_msg_body.slice_empty?()) {
    ;;     return ();
    ;; }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) {
        return ();
    }

    slice sender_address = cs~load_msg_addr();

    (cell contributors, slice owner, int percentage_payoff,
     int deadline, int total_pledge) = load_data();

    ;; (slice owner_value, int owner_exist?) = contributors.udict_get?(256, owner);
    int owner_previous_balance = owner_exist? ? owner_value.load_coins() : 0;

    if(sender_address == owner) {
        owner_value = begin_cell().store_coins(owner_previous_balance + muldiv(msg_value, 8, 10)).end_cell().begin_parse(); ;; 20% for computation fees
    }
    else {
        throw_unless(error::campaign_over(), now < deadline); ;; make sure individuals won't invest after the campaign is over so individuals won't lose money

        int payoff_value = muldiv(msg_value, percentage_payoff, 100);
        throw_unless(error::not_enough_balance_for_payoff(), payoff_value <= owner_previous_balance);
        owner_value = begin_cell().store_coins(owner_previous_balance - payoff_value).end_cell().begin_parse();

        ;; (slice sender_value, int sender_exist?) = contributors.udict_get?(256, sender_address);
        int sender_previous_balance = sender_exist? ? sender_value.load_coins() : 0;
        sender_value = begin_cell().store_coins(sender_previous_balance + msg_value + payoff_value).end_cell().begin_parse();
        ;; set value for sender

        total_pledge += msg_value;
    }

    ;; set value for owner
    save_data(contributors, owner, percentage_payoff, deadline, total_pledge);
    return();

}
